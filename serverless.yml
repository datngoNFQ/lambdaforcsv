service: lambdaforcsvrev1
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${file(config.json):STAGE}
  region: ${file(config.json):REGION}
  # Give permission for lambda to work with S3
  # Hint: to improve, setting granular role at per function level
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:GetObjectVersion"
        - "s3:PutObject"
      Resource:
        - "arn:aws:s3:::${file(config.json):S3_BUCKET}/*"
  profile: serverlessUser

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
          path: getUser/
          method: GET
          cors: true
  applyvoucher:
    handler: lambdas/endpoints/applyvoucher.handler
    events:
      - http:
          path: voucher
          method: post
          cors: true
  uploadcsv:
    handler: lambdas/endpoints/uploadCsv.handler
    events:
      - http:
          path: csv
          method: post
          cors: true
  importToDB:
    handler: lambdas/worker/importToDB.handler
    events:
      - s3:
          bucket: ${file(config.json):S3_BUCKET}
          event: s3:ObjectCreated:*
          existing: true
resources:
  Resources:
    s3WithLambda:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${file(config.json):S3_BUCKET}
plugins:
  - serverless-apigw-binary
  - serverless-webpack
package:
  individually: true
custom:
  apigwBinary:
    types: #list of mime-types
      - "image/jpeg"
      - "text/html"
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
